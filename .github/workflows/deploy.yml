name: Deploy to EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
        
    - name: Run tests
      run: cargo test --verbose
      
    - name: Check code formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy -- -D warnings

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        port: ${{ secrets.EC2_SSH_PORT }}
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 60s
        command_timeout: 10m
        script: |
          # Stop existing container
          docker stop tracking-consumer || true
          docker rm tracking-consumer || true
          
          # Pull new image
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
          
          # Create config directory
          mkdir -p /opt/tracking-consumer/config
          
          # Create config file with environment variables
          cat > /opt/tracking-consumer/config/app.toml << EOF
          [mqtt]
          broker = "${{ vars.MQTT_BROKER }}"
          port = ${{ vars.MQTT_PORT }}
          topic = "${{ vars.MQTT_TOPIC }}"
          username = "${{ vars.MQTT_USERNAME }}"
          password = "${{ secrets.MQTT_PASSWORD }}"
          client_id = "${{ vars.MQTT_CLIENT_ID }}"
          keep_alive_secs = ${{ vars.MQTT_KEEP_ALIVE_SECS }}
          clean_session = ${{ vars.MQTT_CLEAN_SESSION }}
          max_reconnect_attempts = ${{ vars.MQTT_MAX_RECONNECT_ATTEMPTS }}
          
          [kafka]
          brokers = ["${{ vars.KAFKA_BROKERS }}"]
          position_topic = "${{ vars.KAFKA_POSITION_TOPIC }}"
          notifications_topic = "${{ vars.KAFKA_NOTIFICATIONS_TOPIC }}"
          batch_size = ${{ vars.KAFKA_BATCH_SIZE }}
          batch_timeout_ms = ${{ vars.KAFKA_BATCH_TIMEOUT_MS }}
          compression = "${{ vars.KAFKA_COMPRESSION }}"
          retries = ${{ vars.KAFKA_RETRIES }}
          
          [database]
          host = "${{ vars.DB_HOST }}"
          port = ${{ vars.DB_PORT }}
          database = "${{ vars.DB_DATABASE }}"
          username = "${{ vars.DB_USERNAME }}"
          password = "${{ secrets.DB_PASSWORD }}"
          max_connections = ${{ vars.DB_MAX_CONNECTIONS }}
          min_connections = ${{ vars.DB_MIN_CONNECTIONS }}
          connection_timeout_secs = ${{ vars.DB_CONNECTION_TIMEOUT_SECS }}
          idle_timeout_secs = ${{ vars.DB_IDLE_TIMEOUT_SECS }}
          
          [processing]
          poi_radius_meters = ${{ vars.PROCESSING_POI_RADIUS_METERS }}
          geofence_check_interval_ms = ${{ vars.PROCESSING_GEOFENCE_CHECK_INTERVAL_MS }}
          worker_threads = ${{ vars.PROCESSING_WORKER_THREADS }}
          message_buffer_size = ${{ vars.PROCESSING_MESSAGE_BUFFER_SIZE }}
          batch_processing_size = ${{ vars.PROCESSING_BATCH_PROCESSING_SIZE }}
          max_parallel_devices = ${{ vars.PROCESSING_MAX_PARALLEL_DEVICES }}
          
          [logging]
          level = "${{ vars.LOGGING_LEVEL }}"
          file_path = "${{ vars.LOGGING_FILE_PATH }}"
          max_file_size_mb = ${{ vars.LOGGING_MAX_FILE_SIZE_MB }}
          max_files = ${{ vars.LOGGING_MAX_FILES }}
          json_format = ${{ vars.LOGGING_JSON_FORMAT }}
          EOF
          
          # Run new container
          docker run -d \
            --name tracking-consumer \
            --restart unless-stopped \
            -v /opt/tracking-consumer/config:/app/config:ro \
            -v /var/log/tracking-consumer:/var/log/tracking-consumer \
            --network host \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
          
          # Show logs
          docker logs tracking-consumer --tail 50